generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

enum VoteType {
  UP
  DOWN
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  ok                Boolean?
  state             String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  about         String?
  status        String?
  url           String?
  role          String?
  theme         String?

  accounts      Account[]
  sessions      Session[]
  article       Article[]
  content       Content[]      @relation("CreatedBy")
  comment       Comment[]
  votes         Vote[]
  commentVote   CommentVote[]
  subscriptions Subscription[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Content {
  id          String         @id @default(cuid())
  name        String         @unique
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  article     Article[]
  creatorId   String?
  creator     User?          @relation("CreatedBy", fields: [creatorId], references: [id])
  subscribers Subscription[]

  @@index([name])
  @@index([creatorId])
}

model Subscription {
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  content   Content @relation(fields: [contentId], references: [id])
  contentId String

  @@id([userId, contentId])
  @@index([contentId])
  @@index([userId])
}

model Article {
  id              String    @id @default(cuid())
  title           String
  content         Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  author          User      @relation(fields: [authorId], references: [id])
  authorId        String
  contentRelation Content   @relation(fields: [contentId], references: [id])
  contentId       String
  comments        Comment[]
  votes           Vote[]

  @@index([authorId])
  @@index([contentId])
}

model Comment {
  id        String        @id @default(cuid())
  text      String
  createdAt DateTime      @default(now())
  author    User          @relation(fields: [authorId], references: [id])
  authorId  String
  article   Article       @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String
  replyToId String?
  replyTo   Comment?      @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[]     @relation("ReplyTo")
  votes     CommentVote[]
  commentId String?

  @@index([authorId])
  @@index([articleId])
  @@index([replyToId])
}

model Vote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String
  type      VoteType

  @@id([userId, articleId])
  @@index([articleId])
  @@index([userId])
}

model CommentVote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  type      VoteType

  @@id([userId, commentId])
  @@index([userId])
  @@index([commentId])
}
