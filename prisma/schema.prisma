generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

enum VoteType {
  UP
  DOWN
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  ok                Boolean?
  state             String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Tenant {
  id      String   @id @default(cuid())
  name    String   @default("default")
  domain  String   @unique @default("default")
  users   User[]
  locales Locale[]
}

model Locale {
  id       String  @id @default(cuid())
  code     String
  name     String
  default  Boolean @default(false)
  tenantId String
  tenant   Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([code, tenantId])
  @@index([tenantId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  about         String?
  status        String?
  url           String?
  role          String?

  accounts    Account[]
  sessions    Session[]
  settings    UserSettings?
  permission  Permission[]
  content     Content[]
  comment     Comment[]
  votes       Vote[]
  commentVote CommentVote[]

  tenantId String? @default("clnoifvo50000b5qus1ailtzy")
  tenant   Tenant? @relation(fields: [tenantId], references: [id])

  @@index([id])
  @@index([tenantId])
}

model UserSettings {
  id     Int     @id @default(autoincrement())
  userId String  @unique
  theme  String?
  locale String?

  user User @relation(fields: [userId], references: [id])
}

model Permission {
  id                   String  @id @default(cuid())
  userCanViewDashboard Boolean @default(true)
  userCanViewContent   Boolean @default(true)
  userCanEditContent   Boolean @default(false)
  userCanCreateContent Boolean @default(false)
  userCanViewSlack     Boolean @default(false)
  userCanViewUsers     Boolean @default(false)
  userCanEditUsers     Boolean @default(false)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Content {
  id          String   @id @default(cuid())
  contentId   String   @unique
  type        String?  @default("article")
  status      String   @default("backlog")
  label       String   @default("new")
  priority    String   @default("low")
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  authorId      String
  author        User               @relation(fields: [authorId], references: [id])
  localizations LocalizedContent[]
  comments      Comment[]
  votes         Vote[]

  @@index([authorId])
}

model LocalizedContent {
  id          String  @id @default(cuid())
  locale      String
  title       String?
  description String?
  content     Json?
  contentId   String
  contentRef  Content @relation(fields: [contentId], references: [id])

  @@unique([contentId, locale])
  @@index([contentId])
  @@index([locale])
}

model Comment {
  id   String @id @default(cuid())
  text String

  createdAt DateTime @default(now())

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  contentId String
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  votes     CommentVote[]
  commentId String?

  @@index([replyToId])
  @@index([contentId])
  @@index([authorId])
}

model View {
  contentId String  @id @db.VarChar(128)
  count     Int     @default(1)
  type      String? @db.VarChar(128)
}

model Vote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  contentId String
  content   Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  type      VoteType

  @@id([userId, contentId])
  @@index([userId])
  @@index([contentId])
}

model CommentVote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  type      VoteType

  @@id([userId, commentId])
  @@index([userId])
  @@index([commentId])
}
